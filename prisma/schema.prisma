generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int              @id @default(autoincrement())
  username             String           @unique
  digest               String
  role                 String
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  privateKey           String
  publicKey            String
  Membership           Membership[]
  Ownership            Ownership[]
  offeredTradeRequest  TradeRequest[]   @relation("TradeCreator")
  acceptedTradeRequest TradeRequest[]   @relation("TradeAcceptor")
  DeclineRequest       DeclineRequest[]

  @@map("users")
}

model TradeRequest {
  // üìù Extend this model 

  id          Int        @id @default(autoincrement())
  status      String?
  userId      Int
  requestedId Int
  offeredId   Int
  requested   Membership @relation("RequestMembership", fields: [requestedId], references: [id], onDelete: Cascade)
  offered     Membership @relation("OfferMembership", fields: [offeredId], references: [id], onDelete: Cascade)

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  acceptedAt     DateTime?
  acceptedById   Int?
  acceptedBy     User?            @relation("TradeAcceptor", fields: [acceptedById], references: [id], onDelete: Cascade)
  user           User             @relation("TradeCreator", fields: [userId], references: [id], onDelete: Cascade)
  DeclineRequest DeclineRequest[]

  @@map("trade_requests")
}

model Membership {
  // üìù Extend this model

  id Int @id @default(autoincrement())

  creatorId           Int
  creator             User           @relation(fields: [creatorId], references: [id])
  price               Int
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  createdAmount       Int
  soldAmount          Int
  tokenId             Int
  Ownership           Ownership[]
  requestTradeRequest TradeRequest[] @relation("RequestMembership")
  offerTradeRequest   TradeRequest[] @relation("OfferMembership")

  @@map("memberships")
}

model Ownership {
  // üìù Extend this model

  id Int @id @default(autoincrement())

  ownerId      Int
  membershipId Int
  owner        User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  membership   Membership @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  amount       Int

  @@unique([ownerId, membershipId])
  @@map("ownerships")
}

model DeclineRequest {
  // üìù Extend this model 

  id           Int          @id @default(autoincrement())
  requestId    Int
  userId       Int
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  tradeRequest TradeRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)

  @@unique([requestId, userId])
  @@map("decline_requests")
}
